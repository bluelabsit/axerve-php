<?php
/**
 * Body1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Axerve\Client
 * @author   Axerve Codegen team
 * @link     https://github.com/axerve-api/axerve-codegen
 */

/**
 * Axerve-php
 *
 * Axerve API client made for PHP
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/axerve-api/axerve-codegen.git
 * Axerve Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the axerve code generator program.
 * https://github.com/axerve-api/axerve-codegen
 * Do not edit the class manually.
 */

namespace Axerve\Client\Model;

use \ArrayAccess;
use \Axerve\Client\ObjectSerializer;

/**
 * Body1 Class Doc Comment
 *
 * @category Class
 * @package  Axerve\Client
 * @author   Axerve Codegen team
 * @link     https://github.com/axerve-api/axerve-codegen
 */
class CreatePaymentModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $axerveModelName = 'body_1';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $axerveTypes = [
        'amount' => 'string',
        'item_type' => 'string',
        'buyer_email' => 'string',
        'language_id' => 'int',
        'buyer_name' => 'string',
        'payment_channel' => '\Axerve\Client\Model\Apiv1paymentcreatePaymentChannel',
        'payment_type' => 'string[]',
        'shop_transaction_id' => 'string',
        'order_details' => '\Axerve\Client\Model\OrderDetailsModel',
        'shipping_details' => '\Axerve\Client\Model\ShippingDetailsModel',
        'client_ip' => 'string',
        'currency' => 'string',
        'recurrent' => 'string',
        'request_token' => 'string',
        'shop_login' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $axerveFormats = [
        'amount' => null,
        'item_type' => null,
        'buyer_email' => null,
        'language_id' => null,
        'buyer_name' => null,
        'payment_channel' => null,
        'payment_type' => null,
        'shop_transaction_id' => null,
        'order_details' => null,
        'shipping_details' => null,
        'client_ip' => null,
        'currency' => null,
        'recurrent' => null,
        'request_token' => null,
        'shop_login' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function axerveTypes()
    {
        return self::$axerveTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function axerveFormats()
    {
        return self::$axerveFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'item_type' => 'itemType',
        'buyer_email' => 'buyerEmail',
        'language_id' => 'languageId',
        'buyer_name' => 'buyerName',
        'payment_channel' => 'paymentChannel',
        'payment_type' => 'paymentType',
        'shop_transaction_id' => 'shopTransactionID',
        'order_details' => 'orderDetails',
        'shipping_details' => 'shippingDetails',
        'client_ip' => 'clientIP',
        'currency' => 'currency',
        'recurrent' => 'recurrent',
        'request_token' => 'requestToken',
        'shop_login' => 'shopLogin'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'item_type' => 'setItemType',
        'buyer_email' => 'setBuyerEmail',
        'language_id' => 'setLanguageId',
        'buyer_name' => 'setBuyerName',
        'payment_channel' => 'setPaymentChannel',
        'payment_type' => 'setPaymentType',
        'shop_transaction_id' => 'setShopTransactionId',
        'order_details' => 'setOrderDetails',
        'shipping_details' => 'setShippingDetails',
        'client_ip' => 'setClientIp',
        'currency' => 'setCurrency',
        'recurrent' => 'setRecurrent',
        'request_token' => 'setRequestToken',
        'shop_login' => 'setShopLogin'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'item_type' => 'getItemType',
        'buyer_email' => 'getBuyerEmail',
        'language_id' => 'getLanguageId',
        'buyer_name' => 'getBuyerName',
        'payment_channel' => 'getPaymentChannel',
        'payment_type' => 'getPaymentType',
        'shop_transaction_id' => 'getShopTransactionId',
        'order_details' => 'getOrderDetails',
        'shipping_details' => 'getShippingDetails',
        'client_ip' => 'getClientIp',
        'currency' => 'getCurrency',
        'recurrent' => 'getRecurrent',
        'request_token' => 'getRequestToken',
        'shop_login' => 'getShopLogin'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$axerveModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['item_type'] = isset($data['item_type']) ? $data['item_type'] : null;
        $this->container['buyer_email'] = isset($data['buyer_email']) ? $data['buyer_email'] : null;
        $this->container['language_id'] = isset($data['language_id']) ? $data['language_id'] : null;
        $this->container['buyer_name'] = isset($data['buyer_name']) ? $data['buyer_name'] : null;
        $this->container['payment_channel'] = isset($data['payment_channel']) ? $data['payment_channel'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['shop_transaction_id'] = isset($data['shop_transaction_id']) ? $data['shop_transaction_id'] : null;
        $this->container['order_details'] = isset($data['order_details']) ? $data['order_details'] : null;
        $this->container['shipping_details'] = isset($data['shipping_details']) ? $data['shipping_details'] : null;
        $this->container['client_ip'] = isset($data['client_ip']) ? $data['client_ip'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['recurrent'] = isset($data['recurrent']) ? $data['recurrent'] : null;
        $this->container['request_token'] = isset($data['request_token']) ? $data['request_token'] : null;
        $this->container['shop_login'] = isset($data['shop_login']) ? $data['shop_login'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string $item_type item_type
     *
     * @return $this
     */
    public function setItemType($item_type)
    {
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets buyer_email
     *
     * @return string
     */
    public function getBuyerEmail()
    {
        return $this->container['buyer_email'];
    }

    /**
     * Sets buyer_email
     *
     * @param string $buyer_email buyer_email
     *
     * @return $this
     */
    public function setBuyerEmail($buyer_email)
    {
        $this->container['buyer_email'] = $buyer_email;

        return $this;
    }

    /**
     * Gets language_id
     *
     * @return int
     */
    public function getLanguageId()
    {
        return $this->container['language_id'];
    }

    /**
     * Sets language_id
     *
     * @param int $language_id language_id
     *
     * @return $this
     */
    public function setLanguageId($language_id)
    {
        $this->container['language_id'] = $language_id;

        return $this;
    }

    /**
     * Gets buyer_name
     *
     * @return string
     */
    public function getBuyerName()
    {
        return $this->container['buyer_name'];
    }

    /**
     * Sets buyer_name
     *
     * @param string $buyer_name buyer_name
     *
     * @return $this
     */
    public function setBuyerName($buyer_name)
    {
        $this->container['buyer_name'] = $buyer_name;

        return $this;
    }

    /**
     * Gets payment_channel
     *
     * @return \Axerve\Client\Model\Apiv1paymentcreatePaymentChannel
     */
    public function getPaymentChannel()
    {
        return $this->container['payment_channel'];
    }

    /**
     * Sets payment_channel
     *
     * @param \Axerve\Client\Model\Apiv1paymentcreatePaymentChannel $payment_channel payment_channel
     *
     * @return $this
     */
    public function setPaymentChannel($payment_channel)
    {
        $this->container['payment_channel'] = $payment_channel;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string[]
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string[] $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets shop_transaction_id
     *
     * @return string
     */
    public function getShopTransactionId()
    {
        return $this->container['shop_transaction_id'];
    }

    /**
     * Sets shop_transaction_id
     *
     * @param string $shop_transaction_id shop_transaction_id
     *
     * @return $this
     */
    public function setShopTransactionId($shop_transaction_id)
    {
        $this->container['shop_transaction_id'] = $shop_transaction_id;

        return $this;
    }

    /**
     * Gets order_details
     *
     * @return \Axerve\Client\Model\OrderDetailsModel
     */
    public function getOrderDetails()
    {
        return $this->container['order_details'];
    }

    /**
     * Sets order_details
     *
     * @param \Axerve\Client\Model\OrderDetailsModel $order_details order_details
     *
     * @return $this
     */
    public function setOrderDetails($order_details)
    {
        $this->container['order_details'] = $order_details;

        return $this;
    }

    /**
     * Gets shipping_details
     *
     * @return \Axerve\Client\Model\ShippingDetailsModel
     */
    public function getShippingDetails()
    {
        return $this->container['shipping_details'];
    }

    /**
     * Sets shipping_details
     *
     * @param \Axerve\Client\Model\ShippingDetailsModel $shipping_details shipping_details
     *
     * @return $this
     */
    public function setShippingDetails($shipping_details)
    {
        $this->container['shipping_details'] = $shipping_details;

        return $this;
    }

    /**
     * Gets client_ip
     *
     * @return string
     */
    public function getClientIp()
    {
        return $this->container['client_ip'];
    }

    /**
     * Sets client_ip
     *
     * @param string $client_ip client_ip
     *
     * @return $this
     */
    public function setClientIp($client_ip)
    {
        $this->container['client_ip'] = $client_ip;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets recurrent
     *
     * @return string
     */
    public function getRecurrent()
    {
        return $this->container['recurrent'];
    }

    /**
     * Sets recurrent
     *
     * @param string $recurrent recurrent
     *
     * @return $this
     */
    public function setRecurrent($recurrent)
    {
        $this->container['recurrent'] = $recurrent;

        return $this;
    }

    /**
     * Gets request_token
     *
     * @return string
     */
    public function getRequestToken()
    {
        return $this->container['request_token'];
    }

    /**
     * Sets request_token
     *
     * @param string $request_token request_token
     *
     * @return $this
     */
    public function setRequestToken($request_token)
    {
        $this->container['request_token'] = $request_token;

        return $this;
    }

    /**
     * Gets shop_login
     *
     * @return string
     */
    public function getShopLogin()
    {
        return $this->container['shop_login'];
    }

    /**
     * Sets shop_login
     *
     * @param string $shop_login shop_login
     *
     * @return $this
     */
    public function setShopLogin($shop_login)
    {
        $this->container['shop_login'] = $shop_login;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            $jsonString = json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
return "$jsonString";
        }

        $jsonString =  json_encode(ObjectSerializer::sanitizeForSerialization($this));
return "$jsonString";
    }
}
